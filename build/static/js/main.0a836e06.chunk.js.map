{"version":3,"sources":["index.js"],"names":["Square","value","onClick","className","Restart","Game","useState","Array","fill","squares","setSquares","isXNext","setIsXNext","nextSymbol","winner","possibleLines","i","length","a","b","c","d","calculateWinner","renderSquare","nextSquares","slice","isBoardFull","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a836e06.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nfunction Square({ value, onClick }) {\n\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Restart({ onClick }) {\n\n  return (\n    <button className=\"restart\" onClick={onClick}>\n      Restart\n    </button>\n  );\n}\n\nfunction Game() {\n  const [ squares, setSquares ] = useState(Array(42).fill(null));\n  const [ isXNext, setIsXNext ] = useState(true);\n  const nextSymbol = isXNext ? \"R\" : \"Y\";\n  const winner = calculateWinner(squares);\n//checking for winner or draw otherwise just returns next player\n  function getStatus() {\n    if (winner) {\n      return \"Winner: \" + winner;\n    } else if (isBoardFull(squares)) {\n      return \"Draw!\";\n    } else {\n      return \"Next player: \" + nextSymbol;\n    }\n  }\n\n  function renderSquare(i) {\n    return (\n      <Square\n        value={squares[i]}\n        onClick={() => {\n          if (squares[i] != null || winner != null) {\n            return;\n          }\n          const nextSquares = squares.slice();\n          nextSquares[i] = nextSymbol;\n          setSquares(nextSquares);\n//toggles the turns\n          setIsXNext(!isXNext); \n        }}\n      />\n    );\n  }\n//restart button\n  function renderRestartButton() {\n    return (\n      <Restart\n        onClick={() => {\n          setSquares(Array(42).fill(null));\n          setIsXNext(true);\n        }}\n      />\n    );\n  }\n//7 by 6 game board\n  return (\n    <div className=\"container\">\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <div className=\"board-row\">\n            {renderSquare(0)}\n            {renderSquare(1)}\n            {renderSquare(2)}\n            {renderSquare(3)}\n            {renderSquare(4)}\n            {renderSquare(5)}\n            {renderSquare(6)}\n          </div>\n          <div className=\"board-row\">\n            {renderSquare(7)}\n            {renderSquare(8)}\n            {renderSquare(9)}\n            {renderSquare(10)}\n            {renderSquare(11)}\n            {renderSquare(12)}\n            {renderSquare(13)}\n          </div>\n          <div className=\"board-row\">\n            {renderSquare(14)}\n            {renderSquare(15)}\n            {renderSquare(16)}\n            {renderSquare(17)}\n            {renderSquare(18)}\n            {renderSquare(19)}\n            {renderSquare(20)}\n          </div>\n          <div className=\"board-row\">\n            {renderSquare(21)}\n            {renderSquare(22)}\n            {renderSquare(23)}\n            {renderSquare(24)}\n            {renderSquare(25)}\n            {renderSquare(26)}\n            {renderSquare(27)}\n        </div>\n        <div className=\"board-row\">\n            {renderSquare(28)}\n            {renderSquare(29)}\n            {renderSquare(30)}\n            {renderSquare(31)}\n            {renderSquare(32)}\n            {renderSquare(33)}\n            {renderSquare(34)}\n        </div>\n        <div className=\"board-row\">\n            {renderSquare(35)}\n            {renderSquare(36)}\n            {renderSquare(37)}\n            {renderSquare(38)}\n            {renderSquare(39)}\n            {renderSquare(40)}\n            {renderSquare(41)}\n        </div>\n        </div>\n        <div className=\"game-info\">{getStatus()}</div>\n        <div className=\"restart-button\">{renderRestartButton()}</div>\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const possibleLines = [\n    //horizontal all combinations\n    [0, 1, 2, 3],\n    [1, 2, 3, 4],\n    [2, 3, 4, 5],\n    [3, 4, 5, 6],\n    [7, 8, 9, 10],\n    [8, 9, 10, 11],\n    [9, 10, 11, 12],\n    [10, 11, 12, 13],\n    [14, 15, 16, 17],\n    [15, 16, 17, 18],\n    [16, 17, 18, 19],\n    [17, 18, 19, 20],\n    [21, 22, 23, 24],\n    [22, 23, 24, 25],\n    [23, 24, 25, 26],\n    [24, 25, 26, 27],\n    [28, 29, 30, 31],\n    [29, 30, 31, 32],\n    [30, 31, 32, 33],\n    [31, 32, 33, 34],\n    [35, 36, 37, 38],\n    [36, 37, 38, 39],\n    [37, 38, 39, 40],\n    [38, 39, 40, 41],\n    //vertical all combinations\n    [0, 7, 14, 21],\n    [1, 8, 15, 22],\n    [2, 9, 16, 23],\n    [3, 10, 17, 24],\n    [4, 11, 18, 25],\n    [5, 12, 19, 26],\n    [6, 13, 20, 27],\n    [7, 14, 21, 28],\n    [8, 15, 22, 29],\n    [9, 16, 23, 30],\n    [10, 17, 24, 31],\n    [11, 18, 25, 32],\n    [12, 19, 26, 33],\n    [13, 20, 27, 34],\n    [14, 21, 28, 35],\n    [15, 22, 29, 36],\n    [16, 23, 30, 37],\n    [17, 24, 31, 38],\n    [18, 25, 32, 39],\n    [19, 26, 33, 40],\n    [20, 27, 34, 41],\n  ];\n// Checks to make sure that the lines are one colour only. All yellow or all red\n  for (let i = 0; i < possibleLines.length; i++) {\n    const [a, b, c, d] = possibleLines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c] && squares[a] === squares[d]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction isBoardFull(squares) {\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      return false;\n    }\n  }\n  return true;\n}"],"sourceRoot":""}